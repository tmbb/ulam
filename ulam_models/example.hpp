
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace example_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 49> locations_array__ = 
{" (found before start of program)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 36, column 2 to column 35)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 45, column 2 to column 35)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 50, column 2 to column 12)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 51, column 2 to column 27)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 52, column 2 to column 17)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 53, column 2 to column 13)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 54, column 2 to column 25)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 62, column 6 to column 71)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 61, column 11 to line 63, column 5)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 60, column 6 to column 67)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 59, column 26 to line 61, column 5)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 59, column 4 to line 63, column 5)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 58, column 17 to line 64, column 3)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 58, column 2 to line 64, column 3)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 76, column 8 to column 127)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 75, column 13 to line 77, column 7)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 74, column 8 to column 123)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 73, column 28 to line 75, column 7)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 73, column 6 to line 77, column 7)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 72, column 11 to line 78, column 5)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 70, column 8 to column 123)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 69, column 13 to line 71, column 7)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 68, column 8 to column 119)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 67, column 28 to line 69, column 7)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 67, column 6 to line 71, column 7)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 66, column 26 to line 72, column 5)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 66, column 4 to line 78, column 5)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 65, column 17 to line 79, column 3)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 65, column 2 to line 79, column 3)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 2, column 2 to column 17)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 7, column 2 to column 38)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 8, column 2 to column 42)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 9, column 8 to column 9)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 9, column 2 to column 47)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 10, column 8 to column 9)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 10, column 2 to column 55)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 11, column 9 to column 26)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 11, column 2 to column 43)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 20, column 2 to column 38)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 21, column 2 to column 42)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 22, column 8 to column 9)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 22, column 2 to column 47)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 23, column 8 to column 9)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 23, column 2 to column 55)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 24, column 9 to column 26)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 24, column 2 to column 43)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 36, column 9 to column 22)",
 " (in '/home/tmbb/Projects/sideprojects/python/ulam/ulam_models/example.stan', line 45, column 9 to column 22)"};




class example_model final : public model_base_crtp<example_model> {

 private:
  int N;
  int N__x__missing;
  int N__x__not_missing;
  std::vector<int> x__is_missing;
  std::vector<int> x__missing_data_index;
  Eigen::Matrix<double, -1, 1> x__not_missing_data__;
  int N__y__missing;
  int N__y__not_missing;
  std::vector<int> y__is_missing;
  std::vector<int> y__missing_data_index;
  Eigen::Matrix<double, -1, 1> y__not_missing_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x__not_missing{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y__not_missing{nullptr, 0};
 
 public:
  ~example_model() { }
  
  inline std::string model_name() const final { return "example_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  example_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "example_model_namespace::example_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization","N__x__missing","int",
           std::vector<size_t>{});
      N__x__missing = std::numeric_limits<int>::min();
      
      
      current_statement__ = 31;
      N__x__missing = context__.vals_i("N__x__missing")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "N__x__missing",
                                            N__x__missing, 0);
      current_statement__ = 31;
      stan::math::check_less_or_equal(function__, "N__x__missing",
                                         N__x__missing, N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","N__x__not_missing",
          "int", std::vector<size_t>{});
      N__x__not_missing = std::numeric_limits<int>::min();
      
      
      current_statement__ = 32;
      N__x__not_missing = context__.vals_i("N__x__not_missing")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "N__x__not_missing",
                                            N__x__not_missing, 0);
      current_statement__ = 32;
      stan::math::check_less_or_equal(function__, "N__x__not_missing",
                                         N__x__not_missing, N);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("x__is_missing", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","x__is_missing","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      x__is_missing = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 34;
      x__is_missing = context__.vals_i("x__is_missing");
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "x__is_missing",
                                            x__is_missing, 0);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "x__is_missing",
                                         x__is_missing, 1);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("x__missing_data_index", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","x__missing_data_index",
          "int", std::vector<size_t>{static_cast<size_t>(N)});
      x__missing_data_index = 
        std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 36;
      x__missing_data_index = context__.vals_i("x__missing_data_index");
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "x__missing_data_index",
                                            x__missing_data_index, 0);
      current_statement__ = 36;
      stan::math::check_less_or_equal(function__, "x__missing_data_index",
                                         x__missing_data_index, N);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("x__not_missing",
                                              "N__x__not_missing",
                                              N__x__not_missing);
      current_statement__ = 38;
      context__.validate_dims("data initialization","x__not_missing",
          "double",
           std::vector<size_t>{static_cast<size_t>(N__x__not_missing)});
      x__not_missing_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N__x__not_missing,
          std::numeric_limits<double>::quiet_NaN());
      new (&x__not_missing) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x__not_missing_data__.data(), N__x__not_missing);
        
      
      {
        std::vector<local_scalar_t__> x__not_missing_flat__;
        current_statement__ = 38;
        x__not_missing_flat__ = context__.vals_r("x__not_missing");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N__x__not_missing; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(x__not_missing,
            x__not_missing_flat__[(pos__ - 1)],
            "assigning variable x__not_missing", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      context__.validate_dims("data initialization","N__y__missing","int",
           std::vector<size_t>{});
      N__y__missing = std::numeric_limits<int>::min();
      
      
      current_statement__ = 39;
      N__y__missing = context__.vals_i("N__y__missing")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "N__y__missing",
                                            N__y__missing, 0);
      current_statement__ = 39;
      stan::math::check_less_or_equal(function__, "N__y__missing",
                                         N__y__missing, N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","N__y__not_missing",
          "int", std::vector<size_t>{});
      N__y__not_missing = std::numeric_limits<int>::min();
      
      
      current_statement__ = 40;
      N__y__not_missing = context__.vals_i("N__y__not_missing")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "N__y__not_missing",
                                            N__y__not_missing, 0);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "N__y__not_missing",
                                         N__y__not_missing, N);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("y__is_missing", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","y__is_missing","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__is_missing = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 42;
      y__is_missing = context__.vals_i("y__is_missing");
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "y__is_missing",
                                            y__is_missing, 0);
      current_statement__ = 42;
      stan::math::check_less_or_equal(function__, "y__is_missing",
                                         y__is_missing, 1);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("y__missing_data_index", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","y__missing_data_index",
          "int", std::vector<size_t>{static_cast<size_t>(N)});
      y__missing_data_index = 
        std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 44;
      y__missing_data_index = context__.vals_i("y__missing_data_index");
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "y__missing_data_index",
                                            y__missing_data_index, 0);
      current_statement__ = 44;
      stan::math::check_less_or_equal(function__, "y__missing_data_index",
                                         y__missing_data_index, N);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("y__not_missing",
                                              "N__y__not_missing",
                                              N__y__not_missing);
      current_statement__ = 46;
      context__.validate_dims("data initialization","y__not_missing",
          "double",
           std::vector<size_t>{static_cast<size_t>(N__y__not_missing)});
      y__not_missing_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N__y__not_missing,
          std::numeric_limits<double>::quiet_NaN());
      new (&y__not_missing) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__not_missing_data__.data(), N__y__not_missing);
        
      
      {
        std::vector<local_scalar_t__> y__not_missing_flat__;
        current_statement__ = 46;
        y__not_missing_flat__ = context__.vals_r("y__not_missing");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= N__y__not_missing; ++sym1__) {
          current_statement__ = 46;
          stan::model::assign(y__not_missing,
            y__not_missing_flat__[(pos__ - 1)],
            "assigning variable y__not_missing", stan::model::index_uni(sym1__));
          current_statement__ = 46;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("x__missing", "N__x__missing",
                                              N__x__missing);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("y__missing", "N__y__missing",
                                              N__y__missing);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N__x__missing + N__y__missing + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "example_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> x__missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N__x__missing,
           DUMMY_VAR__);
      current_statement__ = 1;
      x__missing = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(N__x__missing);
      Eigen::Matrix<local_scalar_t__, -1, 1> y__missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N__y__missing,
           DUMMY_VAR__);
      current_statement__ = 2;
      y__missing = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(N__y__missing);
      local_scalar_t__ mu_x = DUMMY_VAR__;
      current_statement__ = 3;
      mu_x = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_x = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_x = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0.01, lp__);
      local_scalar_t__ intercept = DUMMY_VAR__;
      current_statement__ = 5;
      intercept = in__.template read<local_scalar_t__>();
      local_scalar_t__ slope = DUMMY_VAR__;
      current_statement__ = 6;
      slope = in__.template read<local_scalar_t__>();
      local_scalar_t__ error = DUMMY_VAR__;
      current_statement__ = 7;
      error = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0.01, lp__);
      {
        current_statement__ = 14;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 12;
          if (stan::model::rvalue(x__is_missing, "x__is_missing",
                stan::model::index_uni(i))) {
            current_statement__ = 10;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(x__missing, "x__missing",
                  stan::model::index_uni(stan::model::rvalue(
                                           x__missing_data_index,
                                           "x__missing_data_index",
                                           stan::model::index_uni(i)))),
                mu_x, sigma_x));
          } else {
            current_statement__ = 8;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(x__not_missing, "x__not_missing",
                  stan::model::index_uni(stan::model::rvalue(
                                           x__missing_data_index,
                                           "x__missing_data_index",
                                           stan::model::index_uni(i)))),
                mu_x, sigma_x));
          }
        }
        current_statement__ = 29;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 27;
          if (stan::model::rvalue(x__is_missing, "x__is_missing",
                stan::model::index_uni(i))) {
            current_statement__ = 25;
            if (stan::model::rvalue(y__is_missing, "y__is_missing",
                  stan::model::index_uni(i))) {
              current_statement__ = 23;
              lp_accum__.add(
                stan::math::normal_lpdf<propto__>(
                  stan::model::rvalue(y__missing, "y__missing",
                    stan::model::index_uni(stan::model::rvalue(
                                             y__missing_data_index,
                                             "y__missing_data_index",
                                             stan::model::index_uni(i)))),
                  ((stan::model::rvalue(x__missing, "x__missing",
                      stan::model::index_uni(stan::model::rvalue(
                                               x__missing_data_index,
                                               "x__missing_data_index",
                                               stan::model::index_uni(i)))) *
                     slope) + intercept), error));
            } else {
              current_statement__ = 21;
              lp_accum__.add(
                stan::math::normal_lpdf<propto__>(
                  stan::model::rvalue(y__not_missing, "y__not_missing",
                    stan::model::index_uni(stan::model::rvalue(
                                             y__missing_data_index,
                                             "y__missing_data_index",
                                             stan::model::index_uni(i)))),
                  ((stan::model::rvalue(x__missing, "x__missing",
                      stan::model::index_uni(stan::model::rvalue(
                                               x__missing_data_index,
                                               "x__missing_data_index",
                                               stan::model::index_uni(i)))) *
                     slope) + intercept), error));
            }
          } else {
            current_statement__ = 19;
            if (stan::model::rvalue(y__is_missing, "y__is_missing",
                  stan::model::index_uni(i))) {
              current_statement__ = 17;
              lp_accum__.add(
                stan::math::normal_lpdf<propto__>(
                  stan::model::rvalue(y__missing, "y__missing",
                    stan::model::index_uni(stan::model::rvalue(
                                             y__missing_data_index,
                                             "y__missing_data_index",
                                             stan::model::index_uni(i)))),
                  ((stan::model::rvalue(x__not_missing, "x__not_missing",
                      stan::model::index_uni(stan::model::rvalue(
                                               x__missing_data_index,
                                               "x__missing_data_index",
                                               stan::model::index_uni(i)))) *
                     slope) + intercept), error));
            } else {
              current_statement__ = 15;
              lp_accum__.add(
                stan::math::normal_lpdf<propto__>(
                  stan::model::rvalue(y__not_missing, "y__not_missing",
                    stan::model::index_uni(stan::model::rvalue(
                                             y__missing_data_index,
                                             "y__missing_data_index",
                                             stan::model::index_uni(i)))),
                  ((stan::model::rvalue(x__not_missing, "x__not_missing",
                      stan::model::index_uni(stan::model::rvalue(
                                               x__missing_data_index,
                                               "x__missing_data_index",
                                               stan::model::index_uni(i)))) *
                     slope) + intercept), error));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "example_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> x__missing =
         Eigen::Matrix<double, -1, 1>::Constant(N__x__missing,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      x__missing = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(N__x__missing);
      Eigen::Matrix<double, -1, 1> y__missing =
         Eigen::Matrix<double, -1, 1>::Constant(N__y__missing,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      y__missing = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(N__y__missing);
      double mu_x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_x = in__.template read<local_scalar_t__>();
      double sigma_x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_x = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0.01, lp__);
      double intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      intercept = in__.template read<local_scalar_t__>();
      double slope = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      slope = in__.template read<local_scalar_t__>();
      double error = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      error = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0.01, lp__);
      out__.write(x__missing);
      out__.write(y__missing);
      out__.write(mu_x);
      out__.write(sigma_x);
      out__.write(intercept);
      out__.write(slope);
      out__.write(error);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> x__missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N__x__missing,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N__x__missing; ++sym1__) {
        stan::model::assign(x__missing, in__.read<local_scalar_t__>(),
          "assigning variable x__missing", stan::model::index_uni(sym1__));
      }
      out__.write(x__missing);
      Eigen::Matrix<local_scalar_t__, -1, 1> y__missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N__y__missing,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N__y__missing; ++sym1__) {
        stan::model::assign(y__missing, in__.read<local_scalar_t__>(),
          "assigning variable y__missing", stan::model::index_uni(sym1__));
      }
      out__.write(y__missing);
      local_scalar_t__ mu_x = DUMMY_VAR__;
      mu_x = in__.read<local_scalar_t__>();
      out__.write(mu_x);
      local_scalar_t__ sigma_x = DUMMY_VAR__;
      sigma_x = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.01, sigma_x);
      local_scalar_t__ intercept = DUMMY_VAR__;
      intercept = in__.read<local_scalar_t__>();
      out__.write(intercept);
      local_scalar_t__ slope = DUMMY_VAR__;
      slope = in__.read<local_scalar_t__>();
      out__.write(slope);
      local_scalar_t__ error = DUMMY_VAR__;
      error = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.01, error);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x__missing", "y__missing", "mu_x",
      "sigma_x", "intercept", "slope", "error"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N__x__missing)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N__y__missing)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N__x__missing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x__missing" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N__y__missing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y__missing" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_x");
    param_names__.emplace_back(std::string() + "sigma_x");
    param_names__.emplace_back(std::string() + "intercept");
    param_names__.emplace_back(std::string() + "slope");
    param_names__.emplace_back(std::string() + "error");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N__x__missing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x__missing" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N__y__missing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y__missing" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_x");
    param_names__.emplace_back(std::string() + "sigma_x");
    param_names__.emplace_back(std::string() + "intercept");
    param_names__.emplace_back(std::string() + "slope");
    param_names__.emplace_back(std::string() + "error");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x__missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N__x__missing) + "},\"block\":\"parameters\"},{\"name\":\"y__missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N__y__missing) + "},\"block\":\"parameters\"},{\"name\":\"mu_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x__missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N__x__missing) + "},\"block\":\"parameters\"},{\"name\":\"y__missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N__y__missing) + "},\"block\":\"parameters\"},{\"name\":\"mu_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((N__x__missing + N__y__missing) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((N__x__missing + N__y__missing) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"x__missing", "y__missing",
      "mu_x", "sigma_x", "intercept", "slope", "error"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{N__x__missing
       , N__y__missing, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = example_model_namespace::example_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return example_model_namespace::profiles__;
}

#endif


